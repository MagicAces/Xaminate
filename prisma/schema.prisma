// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Define the data model for ExamsOfficer
model ExamsOfficer {
  id             Int       @id @default(autoincrement())
  first_name     String    
  last_name      String    
  email          String    @unique
  password       String    
  email_alerts   Boolean   @default(false)
  created_on     DateTime  @default(now())
  updated_at     DateTime  @updatedAt
  report         Report[]
  creator        Session[] @relation("Creator")
  terminator     Session[] @relation("Terminator")
  token          Token[]

  @@map("exams_officers")
}

// Define the data model for Notification
model Notification {
  id           Int       @id @default(autoincrement())
  category     Category     
  message      String    @db.Text
  read         Boolean   @default(false)
  category_id  Int
  created_on   DateTime  @default(now()) 
  updated_at   DateTime  @updatedAt

  @@map("notifications")
}

model Venue {
  id                Int            @id @default(autoincrement())
  name              String
  deleted           Boolean        @default(false)
  created_on        DateTime       @default(now()) 
  updated_at        DateTime       @updatedAt
  sessions          Session[]
  bookings          VenueBooking[]
  cameras           Camera[]

  @@map("venues")
}

model Session {
  id              Int            @id @default(autoincrement())
  start_time      DateTime
  end_time        DateTime
  venue_id        Int
  comments        String?        @db.Text   
  actual_end_time DateTime?
  terminated_by   Int?
  created_by      Int?
  course_names    String[]
  course_codes    String[]
  classes         String[]
  invigilators    String[]
  created_on      DateTime       @default(now()) 
  updated_at      DateTime       @updatedAt
  reports         Report[]
  temp_status     TempStatus     @default(pending)
  attendance      Attendance?
  booking         VenueBooking[]

  venue           Venue          @relation(fields: [venue_id], references: [id])
  terminator      ExamsOfficer?  @relation("Terminator", fields: [terminated_by], references: [id])
  creator         ExamsOfficer?  @relation("Creator", fields: [created_by], references: [id])

  @@map("sessions")
}

model VenueBooking {
  id          Int      @id @default(autoincrement())
  venue_id    Int
  session_id  Int      @unique
  start_time  DateTime
  end_time    DateTime

  venue       Venue    @relation(fields: [venue_id], references: [id])
  session     Session  @relation(fields: [session_id], references: [id])

  @@unique([venue_id, start_time, end_time])
  @@map("venue_bookings")
}


model Camera {
  id          Int           @id @default(autoincrement())
  name        String        @unique
  venue_id    Int
  status      CameraStatus  @default(Active)
  created_on  DateTime      @default(now())
  updated_at  DateTime      @updatedAt
  reports     Report[]

  venue       Venue         @relation(fields: [venue_id], references: [id])

  @@map("cameras")
}

// Define the data model for Report
model Report {
  id                    Int            @id @default(autoincrement())
  status                Status         @default(Pending)
  student_id            Int?
  description           String         @db.Text
  comments              String?        @db.Text      
  last_edited_by        Int?
  snapshot_url          String?
  status_changed        DateTime?
  session_id            Int
  timestamp             DateTime      
  created_on            DateTime       @default(now()) 
  updated_at            DateTime       @updatedAt
  camera_id             Int?

  student               Student?       @relation(fields: [student_id], references: [id])
  editor                ExamsOfficer?  @relation(fields: [last_edited_by], references: [id])
  session               Session        @relation(fields: [session_id], references: [id])
  camera          Camera?        @relation(fields: [camera_id], references: [id])

  @@map("reports")
}

// Define the data model for Student
model Student {
  id             Int       @id @default(autoincrement())
  first_name     String    
  last_name      String
  other_name     String?
  program        String
  level          Int
  index_number   Int       @unique
  reference_no   Int       @unique
  image_url      String?   
  report         Report[]
  attendances    StudentAttendance[]
  created_on     DateTime  @default(now()) 
  updated_at     DateTime  @updatedAt

  @@map("students")
}

model Attendance {
  id                    Int                     @id @default(autoincrement())
  session_id            Int                     @unique
  unidentified_count    Int                     @default(0)
  student_count         Int                     @default(0)
  student_attendance    StudentAttendance[]
  version_timestamps    DateTime[]
  created_on            DateTime                @default(now())
  updated_at            DateTime                @updatedAt

  session               Session                 @relation(fields: [session_id], references: [id])

  @@map("attendances")
}

model StudentAttendance {
  id              Int           @id @default(autoincrement())
  attendance_id   Int
  student_id      Int
  history         Boolean[]
  created_on      DateTime      @default(now())
  updated_at      DateTime      @updatedAt

  attendance      Attendance    @relation(fields: [attendance_id], references: [id])
  student         Student       @relation(fields: [student_id], references: [id])

  @@map("student_attendances")
}

//Define the data model for Token
model Token {
  id                Int           @id @default(autoincrement())
  token             String    
  expirationDate    DateTime      @default(dbgenerated("now() + interval '15 minutes'"))  
  created_on        DateTime      @default(now()) 
  updated_at        DateTime      @updatedAt
  user_id           Int
  
  user              ExamsOfficer  @relation(fields: [user_id], references: [id])

  @@map("tokens")
}

enum Category {
  Report
  Session

  @@map("categories")
}

enum Status {
  Pending
  Approved
  Rejected

  @@map("report_statuses")
}

enum TempStatus {
  pending
  active
  closed
  
  @@map("session_statuses")
}

enum CameraStatus {
  Active
  Inactive
  Maintenance
}